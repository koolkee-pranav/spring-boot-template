<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
	     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<groupId>com.kulkeez</groupId>
	<artifactId>sookti</artifactId>
	<version>0.0.1</version>
	<packaging>jar</packaging>

	<name>sookti-service</name>
	<description>Sookti - accelerator to develop applications using Spring Framework</description>
  	<inceptionYear>2022</inceptionYear>

	<developers>
    	<developer>
      		<id>kulkeez</id>
      		<name>Vikram Kulkarni</name>
      		<email>kulkeez@yahoo.com</email>
      		<url>http://www.hpe.com</url>
			<roles>
				<role>Programmer</role>
			</roles>
			<timezone>+5</timezone>  
		</developer>
  	</developers>
		
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<requireMavenVersion>3.9.0</requireMavenVersion>
		<java.version>17</java.version>
		<maven.surefire.plugin>2.22.2</maven.surefire.plugin>
	</properties>

    <profiles>
        <profile>
            <id>dev</id>
            <activation>
                <!-- This profile is active by default.
                     When this profile is active, only unit tests are run -->
                <activeByDefault>true</activeByDefault>
                
                <!-- activate if system properties 'env=dev' -->
                <property>
                    <name>env</name>
                    <value>dev</value>
                </property>
            </activation>
            <properties>
            	<maven.test.skip>false</maven.test.skip>
            </properties>		
        </profile>
        
        <profile>
            <id>prod</id>
            <activation>
                <!-- activate if system properties 'env=prod' -->
                <property>
                    <name>env</name>
                    <value>prod</value>
                </property>
            </activation>
            <properties>
            </properties>
        </profile>
               
    </profiles>
    		
	<dependencies>
	
		<!--  By default, Spring Boot use Tomcat as the default embedded server.
		  	  To change it to Jetty, we exclude Tomcat and include Jetty dependency
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!--  To avoid boilerplate code i.e. need for declaring an instance of a logger -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		<!-- hot swapping, disable cache for template, enable live reload -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>		

		<!--  Enable Actuator endpoints for monitoring health -->
		<!--  A new set of RESTful end points are added to the application such as /env, /health, /info, /metrics, /trace and /dump -->
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>	

		<!-- for using standard validation annotations-->
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
		
	</dependencies>

	<build>
		<plugins>
							
			<!-- collects all the jars on the classpath and builds a single, runnable Ã¼ber-jar -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
			    <groupId>org.apache.maven.plugins</groupId>
			    <artifactId>maven-surefire-plugin</artifactId>
			    <configuration>
			        <!-- Sets the VM argument line used when unit tests are run to ensure that the JaCoCo agent is running -->
			        <argLine>${surefireArgLine}</argLine>
			        <!-- Skips unit tests if the value of skip.unit.tests property is true -->
			        <skipTests>${skip.unit.tests}</skipTests>
			        <!-- Excludes integration tests when unit tests are run -->
			        <excludes>
			            <exclude>**/IT*.java</exclude>
			        </excludes>
			    </configuration>
			</plugin>

			<!-- basic setup of JaCoCo for computing the test code coverage -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.11</version>
			    <executions>
			        <!--
			            Prepares the property pointing to the JaCoCo runtime agent which
			            is passed as VM argument when the Maven Surefire plugin is executed.
			        -->
			        <execution>
			            <id>pre-unit-test</id>
			            <goals>
			                <goal>prepare-agent</goal>
			            </goals>
			            <configuration>
			                <!-- Sets the path to the file which contains the execution data. -->
			                <destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
			                <!--
			                    Sets the name of the property containing the settings
			                    for JaCoCo runtime agent.
			                -->
			                <propertyName>surefireArgLine</propertyName>
			            </configuration>
			        </execution>
			        <!--
			            Ensures that the code coverage report for unit tests is created after
			            unit tests have been run.
			        -->
			        <execution>
			            <id>post-unit-test</id>
			            <phase>test</phase>
			            <goals>
			                <goal>report</goal>
			            </goals>
			            <configuration>
			                <!-- Sets the path to the file which contains the execution data. -->
			                <dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
			                <!-- Sets the output directory for the code coverage report. -->
			                <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
			            </configuration>
			        </execution>
			    </executions>
        	</plugin>

			<!-- display active profile in compile phase -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-help-plugin</artifactId>
				<executions>
					<execution>
						<id>show-profiles</id>
						<phase>none</phase>  <!--  change to 'compile' to debug & troubleshoot -->
						<goals>
							<goal>active-profiles</goal>
						</goals>
					</execution>
				</executions>
			</plugin>   			
		</plugins>

		<!-- share the same plugin configuration across all project modules -->
		<!-- and lock down plugin versions to avoid using Maven defaults    -->
		<pluginManagement>
		  <plugins>
		  						
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<executions>
					<execution>
						<id>enforce-versions</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireMavenVersion>
									<version>${requireMavenVersion}</version>
								</requireMavenVersion>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
				
		  </plugins>
		</pluginManagement>
				
	</build>

    <repositories>
        <repository>
            <id>spring-milestone</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
			<snapshots>
            	<enabled>true</enabled>
        	</snapshots>             
        </repository>
    </repositories>
    
</project>
